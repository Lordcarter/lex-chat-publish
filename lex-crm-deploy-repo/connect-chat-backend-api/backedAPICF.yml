AWSTemplateFormatVersion: '2010-09-09'


Mappings:
  FunctionMap:
    Configuration:
      S3Bucket: "<bucket>"
      S3Key: "deployment/"

Parameters:
  contactFlowId:
    Type: String
    Default: 12345678-1234-1234-1234-123456789012
    Description: The contact flow id that the customer will interact with while chatting
    AllowedPattern: '\w{8}-\w{4}-\w{4}-\w{4}-\w{12}'
  instanceId:
    Type: String
    Default: 12345678-1234-1234-1234-123456789012
    Description: The instance id of the Amazon Connect instance that the customer will interact with while chatting
    AllowedPattern: '\w{8}-\w{4}-\w{4}-\w{4}-\w{12}'

Outputs:
  StartChatLambda:
    Description:  The ARN of the Lambda function created to initiate chat
    Value: !GetAtt StartChatLambda.Arn
  ApiGatewayEndoint:
    Description:  The ARN of the API Gateway endpoint that triggers the Lambda function to initiate the chat
    Value: !Ref ApiGatewayRestAPI
  StartChatLambdaExecutionRole:
    Description:  The ARN of the IAM role used by the Lambda function to initiate the chat
    Value: !GetAtt StartChatLambdaExecutionRole.Arn

Resources:

  #### Lambda #####
  ChatSDKLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - "nodejs10.x"
        - "nodejs8.10"
      Content:
        S3Bucket: !FindInMap [FunctionMap, Configuration, S3Bucket]
        S3Key: !Join ["", [!FindInMap [FunctionMap, Configuration, S3Key], 'ChatSDK.zip']]
      Description: The AWS SDK including Amazon Connect Chat APIs.

  StartChatLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description:  AWS Lambda Function to initiate the chat with the end user
      Handler: "startChatContact.handler"
      Role: !GetAtt StartChatLambdaExecutionRole.Arn
      Runtime: "nodejs10.x"
      MemorySize: 128
      Timeout: 30
      Layers:
        - !Ref ChatSDKLayer
      Environment:
        Variables:
          INSTANCE_ID: !Ref instanceId
          CONTACT_FLOW_ID: !Ref contactFlowId
      Code:
        S3Bucket: !FindInMap [FunctionMap, Configuration, S3Bucket]
        S3Key: !Join ["", [!FindInMap [FunctionMap, Configuration, S3Key], 'startChatContact.zip']]

  StartChatLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: start-chat-contact-execution-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: "Allow"
                Action:
                  - "connect:StartChatContact"
                Resource:
                  - !Sub "arn:${AWS::Partition}:connect:${AWS::Region}:${AWS::AccountId}:instance/${instanceId}"
                  - !Sub "arn:${AWS::Partition}:connect:${AWS::Region}:${AWS::AccountId}:instance/${instanceId}/*"
  ApiGatewayRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "StartChatContact"
      Description: "API to initiate chat with Amazon Connect"

  LambdaApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt StartChatLambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestAPI}/*"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayRootMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestAPI
      StageName: "Prod"

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: LambdaApiGatewayInvokePermission
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt StartChatLambda.Arn
        PassthroughBehavior: WHEN_NO_MATCH
      ResourceId:  !GetAtt ApiGatewayRestAPI.RootResourceId
      RestApiId: !Ref ApiGatewayRestAPI
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty
        - StatusCode: "500"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !GetAtt ApiGatewayRestAPI.RootResourceId
      RestApiId: !Ref ApiGatewayRestAPI
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
